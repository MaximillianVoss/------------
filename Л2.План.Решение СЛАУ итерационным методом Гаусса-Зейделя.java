import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Scanner;

class Matrix {

  private double[][] data; // Двумерный массив для хранения элементов матрицы коэффициентов СЛАУ
  private double[] constants; // Одномерный массив для хранения элементов вектора свободных членов СЛАУ
  private double[] solution; // Одномерный массив для хранения найденного решения СЛАУ

  // Конструктор класса Matrix, принимающий имя файла с данными системы.
  public Matrix(String filename) {
    // Инициализация массива data и constants из файла.
  }

  // Метод проверки сходимости системы.
  private boolean checkConvergence() {
    // Для каждой строки матрицы проверить условие сходимости:
    // Сумма абсолютных значений недиагональных элементов должна быть меньше или равна
    // абсолютному значению диагонального элемента.
  }

  // Метод для решения СЛАУ итерационным методом Гаусса-Зейделя.
  public double[] solve() {
    // 0.Проверить условие сходимости системы с помощью метода checkConvergence().
    // Если условие сходимости не выполняется, вернуть null и сообщить об этом пользователю.
    // 1.Инициализировать переменные:
    // 1.1. Установить n = размерность системы.
    // 1.2. Создать массивы:
    // 1.2.1. x размерности n для хранения решений;
    // 1.2.2. prevX размерности n для хранения предыдущих решений;
    // 1.3. Установить точность вычислений eps и максимальное количество итераций maxIterations.
    // 2.Для k от 0 до maxIterations выполнить:
    // 2.1. Скопировать текущие решения в массив prevX.
    // 2.2. Для i от 0 до n выполнить:
    // 2.2.1. Вычислить sum = constants[i].
    // 2.2.2. Для j от 0 до n выполнить:
    // 2.2.2.1. Если i != j, то вычислить sum -= data[i][j] * prevX[j].
    // 2.2.3. Вычислить x[i] = sum / data[i][i].
    // 2.3. Вычислить максимальную разницу между текущими и предыдущими решениями, maxDiff = |x[0] - prevX[0]|.
    // 2.4. Для i от 1 до n выполнить:
    // 2.4.1. Вычислить разницу diff = |x[i]
    // 2.4.2. Если diff > maxDiff, то установить maxDiff = diff.
    // 2.5. Если maxDiff < eps, то выйти из цикла.
    // 3.Сохранить решение в массив solution и вернуть его.
  }

  // Метод для вывода исходной системы уравнений на экран.
  public void printSystem() {
    // Вывод элементов матрицы коэффициентов и вектора свободных членов на экран.
  }

  // Метод для вывода решения системы уравнений на экран.
  public void printSolution() {
    // Если решение найдено, вывод его на экран.
    // В противном случае вывод сообщения о том, что решение не найдено из-за несходимости системы.
  }
}

public class Main {

  public static void main(String[] args) {
    // Создание экземпляра класса Matrix и инициализация системы уравнений из файла.
    Matrix matrix = new Matrix("data.txt");

    // Вывод исходной системы уравнений на экран.
    matrix.printSystem();

    // Решение системы уравнений итерационным методом Гаусса-Зейделя.
    double[] solution = matrix.solve();

    // Вывод решения системы уравнений на экран.
    matrix.printSolution();
  }
}
