import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

// Класс Matrix для работы с матрицей и решения СЛАУ
public class Matrix {

  private double[][] data; // двумерный массив для хранения матрицы (коэффициенты и константы)
  private double[] solution; // одномерный массив для хранения решения системы уравнений

  // Конструктор по умолчанию
  public Matrix() {
    // Инициализация переменных класса нулями
  }

  // Конструктор с заданным размером матрицы
  public Matrix(int rows, int cols) {
    // Инициализация переменных класса с заданными значениями
    // Создание двумерного массива с заданными размерами
  }

  // Метод для чтения матрицы из текстового файла
  public void readFromFile(String filename) {
    // Открыть текстовый файл
    // Прочитать размеры матрицы
    // Создать двумерный массив с прочитанными размерами
    // Заполнить массив данными из файла
    // Закрыть файл
  }

  // Метод для вывода матрицы на экран
  public void print() {
    // Вывести на экран двумерный массив (матрицу)
  }

  // Метод для приведения системы к треугольному виду и проверки на вырожденность и количество решений
  private String triangularForm() {
    // Для каждой строки матрицы, кроме последней:
    //   Проверить элемент на диагонали, если он равен 0:
    //     Найти строку ниже с ненулевым элементом в этом столбце
    //     Если такой строки нет, вернуть "система вырожденная"
    //     Если такая строка есть, поменять строки местами
    //   Вызвать метод для пересчета коэффициентов
    // Проверить последнюю строку на кол-во решений:
    //   Если все элементы строки равны нулю, кроме последнего, вернуть "нет решений"
    //   Если все элементы строки равны нулю, вернуть "бесконечно много решений"
    // Вернуть "система невырожденная"
  }

  // Метод для пересчета коэффициентов после обнаружения ненулевого элемента на диагонали
  private void recalculateCoefficients(int currentRow) {
    // Для каждой строки ниже текущей строки:
    //   Вычислить множитель для исключения переменной
    //   Обновить элементы строки с учетом множителя
  }

  // Метод для решения системы линейных уравнений методом Гаусса
  public void solve() {
    // Вызвать метод triangularForm() для получения треугольной матрицы
    // В зависимости от результата:
    // Если "система вырожденная", вывести сообщение "Система вырожденная" и вернуть
    // Если "нет решений", вывести сообщение "Система не имеет решений" и вернуть
    // Если "бесконечно много решений", вывести сообщение "Система имеет бесконечно много решений" и вернуть
    // Вызвать метод обратной подстановки для решения системы уравнений
    // Сохранить решение в массив solution
  }

  // Метод обратной подстановки для нахождения решения системы уравнений
  private void backSubstitution() {
    // Создать массив решений solution размерности количество строк
    // Для каждой строки, начиная с последней и двигаясь вверх:
    // Вычислить решение текущей переменной с учетом уже найденных решений
  }

  // Метод для вывода решения системы уравнений на экран
  public void printSolution() {
    // Вывести на экран одномерный массив (решение системы)
  }
}

// Класс Main для запуска программы
public class Main {

  public static void main(String[] args) {
    // Создать объект класса Matrix
    // Прочитать систему уравнений из файла
    // Вывести исходную систему уравнений на экран
    // Решить систему уравнений
    // Вывести решение системы уравнений на экран
  }
}
