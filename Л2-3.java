public class Matrix { //класс Матрицы

  // Инициализация переменных
  private double[][] array; //Матрица (массив)
  private int rowAmount; //Количество строк
  private int columnAmount; //Количество столбцов
  private double epsilon; //Погрешность
  private double[] sums; //Сумма строк матрицы
  private int[] notNullCombination; //массив для решения

  // Метод Print(): вывод матрицы на экран
  public void Print() {
    // Вывод элементов матрицы на экран
  }

  // Метод Init(): инициализация матрицы из файла
  public void Init(String s) throws FileNotFoundException {
    // Открытие файла с именем s
    // Чтение матрицы из файла
    // Закрытие файла
  }

  // Метод: проверка наличия нулей на главной диагонали
  public boolean CheckForZeros(int[] combination) {
    // Проверка наличия нулей на главной диагонали матрицы
    // Возвращение true, если есть нули, иначе false
  }

  // Метод: проверка достаточного условия сходимости
  public boolean CheckSCC(int[] combination) {
    // Проверка достаточного условия сходимости матрицы:
    // "Сумма всех недиагональных элементов в строке по абсолютной величине должна быть <= абсолютной величине диагонального элемента"
    //ЧЕРЕЗ ВЛОЖЕННЫЕ ЦИКЛЫ:
    // Для каждой строки высчитываем сумму всех недиагональных элементов.
    // Сравниваем сумму с абсолютной велечиной диагоналного элемента
    // Повторяем это условие для всех строк
    // Возвращение true, если условие выполняется, иначе false (если хотя бы в 1 случае диагональный элемент строго > )
  }

  // Метод решения системы итерационным методом
  public double[] SolveByIterations() {
    // Инициализация массива текущего приближения
    // Инициализация переменной для хранения максимальной разности
    // Повторение до сходимости
    //   Инициализация переменной для хранения максимальной разности в текущей итерации
    //   Перебор строк матрицы
    //     Инициализация переменной для хранения нового значения элемента текущей строки
    //     Вычисление нового значения элемента текущей строки
    //     Вычисление разности между новым и предыдущим значением элемента
    //     Обновление максимальной разности, если необходимо
    //     Обновление текущего приближения
    // Повторение до сходимости

    // Возврат текущего приближения
  }

  // Метод решения системы итерационным методом с контролем сходимости
  public double[] SolveByIterationsWithControl() {
    // Получение комбинации строк матрицы
    // Проверка наличия нулей на главной диагонали
    //   Если нули есть
    //     Удаление нулей с главной диагонали
    //     Обновление комбинации строк
    //   Выполнение итерационного метода
    // Возврат результата итерационного метода
  }

  // Метод удаления нулей с главной диагонали
  public boolean RemoveZeroesFromDiagonal(int diag, int[] combination) {
    // Проверка наличия нулей на главной диагонали
    //   Если нули есть
    //     Инициализация переменной для хранения индекса строки с ненулевым элементом на диагонали
    //     Перебор строк матрицы
    //       Если текущий элемент на диагонали не равен нулю
    //         Обновление индекса строки
    //     Обмен строками с нулевым элементом на диагонали и строкой с ненулевым элементом
    //     Возврат true
    //   Иначе
    //     Возврат false
  }

  // Метод проверки результата решения системы
  public Result CheckAnswer(int[] combination) {
    // Проверка достаточного условия сходимости
    //   Если условие выполняется
    // Если удаление нулей с главной диагонали удалось
    // Заменяем матрицу новой комбинацией строк
    // Возвращаем результат "Система больше не имеет 0 на диагонали и соблюдается ДУС"
    // Если в матрице нет нулей на диагонали
    // Заменяем матрицу новой комбинацией строк
    // Возвращаем результат "Система больше не имеет 0 на диагонали, и не соблюдается ДУС"

    // Возвращаем результат "Систему нельзя решить итерационным методом"
  }

  // Метод замены матрицы с использованием комбинации строк
  public double[][] ReplaceWithCombination(int[] combination) {
    // Создание новой матрицы с размерами текущей матрицы
    // Перебор строк матрицы
    //   Копирование строки согласно комбинации
    // Возврат новой матрицы
  }

  // Метод получения комбинации строк матрицы
  public int[] GetCombination() {
    // Создание и инициализация массива комбинации
    // Перебор строк матрицы
    //   Установка элемента комбинации равным индексу строки
    // Возврат массива комбинации
  }

  // Вспомогательные методы:

  // Метод сравнения числа с нулем с учетом погрешности
  private boolean CompareToZero(double a) {
    // Сравнение числа с нулем с использованием погрешности
    // Возврат true, если число равно нулю с учетом погрешности, иначе false
  }

  // Метод вычисления сумм элементов строк матрицы
  private double[] SumOfLines(double[][] matrix) {
    // Создание массива для хранения сумм элементов строк
    // Перебор строк матрицы
    //   Инициализация переменной для хранения суммы элементов строки
    //   Перебор элементов строки
    //     Добавление элемента к сумме
    //   Запись суммы в соответствующий элемент массива
    // Возврат массива сумм
  }

  // Метод создания матрицы с заданным числом строк и столбцов
  private void Create(int k, int l) {
    // Создание матрицы с заданным числом строк
    // Цикл по строкам матрицы
    //   Создание массивов столбцов для каждой строки
  }

  // Метод: обмен элементами массива
  private void SwapElements(int i, int j, int[] combination) {
    // Обмен значениями элементов массива с индексами i и j
  }
}

public class Main {

  // Метод main(): точка входа в программу
  public static void main(String[] args) {
    // Создание объекта матрицы
    // Инициализация матрицы из файла
    // Вывод исходной матрицы на экран
    // Решение системы методом итераций
    // Вывод результата на экран
  }

  // Метод вывода результата на экран
  public static void getResult(Result result) {
    // Вывод соответствующего сообщения в зависимости от значения result
  }

  // Метод вывода массива решений на экран
  public static void printArray(double[] matrix) {
    // Вывод текста "Результат: "
    // Цикл по элементам массива matrix
    //   Вывод элемента массива на экран с форматированием
    // Вывод пустой строки
  }
}
// Всего определено три возможных состояния:
// Систему уравнений нельзя решить итерационными методами.
// Система больше не имеет 0 на диагонали, и не соблюдается ДУС
// Система больше не имеет 0 на диагонали и соблюдается ДУС
// Примечания
// лаб2
// Возвращаемое значение Iteration используем для решения с контролем либо без контроля
// ОДНА ИТЕРАЦИЯ — это отдельный метод, который вызывается в методах решения с контролем / без контроля
// Используем Iteration для обоих методов
// В методе итерации для приближения нужно знать максимальную разность между текущим и предыдущим приближением.
// Мы ее возвращаем и по-разному используем для метода решения с контролем и без контроля.
// С КОНТРОЛЕМ: предыдущая разность и текущая должна уменьшаться, и мы ее считаем
// БЕЗ КОНТРОЛЯ: полученное значение просто сравниваем с абсолютной велечиной
// Видимо, надо добвить метод решения одной итерации отдельно
